name: Deploy to Kubernetes Prod

on:
  push:
    branches:
      - main

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -Ur requirements.txt -Ur requirements.tests.txt

      - name: Run unit tests with coverage
        env:
          PYTHONUNBUFFERED: "1"
          DATABASE_URL: "sqlite+aiosqlite:///:memory:"
          OPENAI_API_KEY: "dummy"
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          S3_BUCKET: ${{ vars.S3_BUCKET }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
          SMTP_NAME: ${{ secrets.SMTP_NAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_PORT: ${{ vars.SMTP_PORT }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          TIPTAP_APP_ID: ${{ vars.TIPTAP_APP_ID }}
          TIPTAP_SECRET_KEY: ${{ secrets.TIPTAP_SECRET_KEY }}
          YANDEX_DICT_KEY: ${{ secrets.YANDEX_DICT_KEY }}
          YANDEX_ID_SECRET_KEY: ${{ secrets.YANDEX_ID_SECRET_KEY }}
        run: |
          cd tests/unit_tests
          PYTHONPATH="../:$PYTHONPATH"
          DATABASE_URL=sqlite+aiosqlite:///:memory:
          pytest . --cov=app --cov-report=xml:coverage-unit.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage-unit.xml


  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -Ur requirements.txt -Ur requirements.tests.txt
          pip install pytest pytest-cov
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Run integration tests with coverage
        env:
          PYTHONUNBUFFERED: "1"
          DATABASE_URL: "sqlite+aiosqlite:///:memory:"
          OPENAI_API_KEY: "dummy"
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          S3_BUCKET: ${{ vars.S3_BUCKET }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
          SMTP_NAME: ${{ secrets.SMTP_NAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SMTP_PORT: ${{ vars.SMTP_PORT }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          TIPTAP_APP_ID: ${{ vars.TIPTAP_APP_ID }}
          TIPTAP_SECRET_KEY: ${{ secrets.TIPTAP_SECRET_KEY }}
          YANDEX_DICT_KEY: ${{ secrets.YANDEX_DICT_KEY }}
          YANDEX_ID_SECRET_KEY: ${{ secrets.YANDEX_ID_SECRET_KEY }}
        run: |
          cd tests/integration_tests
          PYTHONPATH="../:$PYTHONPATH"
          DATABASE_URL=sqlite+aiosqlite:///:memory:
          pytest . --cov=app --cov-report=xml:coverage-integration.xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-coverage
          path: coverage-integration.xml


  merge-coverage:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install coverage
        run: |
          pip install coverage

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Merge coverage reports
        run: |
          coverage combine coverage-unit.xml coverage-integration.xml
          coverage report
          coverage xml -o coverage-combined.xml

      - name: Upload combined coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-combined.xml
          fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: samplec0de/lyrics-ide-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  migrate-database:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Kubectl
        uses: azure/k8s-set-context@v4
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}

      - name: Port-forward to database
        run: |
          kubectl port-forward -n lyrics-ide service/lyrics-postgresql 5432:5432 &

      - name: Install dependencies
        run: |
          python3 -m pip install asyncpg==0.29.0 SQLAlchemy==2.0.25 alembic==1.13.1

      - name: Run database migrations
        working-directory: ./app
        run: |
          DATABASE_URL=${{ secrets.DATABASE_URL }} alembic upgrade head

  deploy:
    runs-on: ubuntu-latest
    needs: [build, migrate-database]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Render Kubernetes manifest
        run: |
          sed -i 's|samplec0de/lyrics-ide-backend:latest|samplec0de/lyrics-ide-backend:${{ github.sha }}|' ./k8s/manifests/backend.yaml

      - name: Set up Kubectl
        uses: azure/k8s-set-context@v4
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f /home/runner/work/lyrics-ide-backend/lyrics-ide-backend/k8s/manifests/
